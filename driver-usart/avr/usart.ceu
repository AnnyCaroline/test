#include "../usart.ceu"

/* TODO: only working with original Arduino? I guess it is ok now. */

///////////////////////////////////////////////////////////////////////////////
// INITIALIZATION
///////////////////////////////////////////////////////////////////////////////

native/pre do
#ifdef __AVR_ATmega644P__
    ##define USART_BAUD(bps) (((F_CPU / (bps*16UL))) - 1)
#else
    ##define USART_BAUD(bps) ((F_CPU/4/bps - 1) / 2)
#endif
end

var Lock usart_lock;
var u8   usart_pm_refs = 0;

var[USART_RX_BUF_N*] byte usart_rx_buf;

///////////////////////////////////////////////////////////////////////////////
// INPUT / OUTPUT
///////////////////////////////////////////////////////////////////////////////

native _UDR0;

input none USART_RX;

native/const _USART0_RX_vect, _USART_RX_vect;

#ifdef ARDUINO_BOARD_MEGA
spawn async/isr [_USART0_RX_vect]
#else
spawn async/isr [_USART_RX_vect]
#endif
do
    outer.usart_rx_buf = outer.usart_rx_buf .. [_UDR0];
    emit USART_RX;
end

///////////////////////////////////////////////////////////////////////////////
// ABSTRACTIONS
///////////////////////////////////////////////////////////////////////////////

code/await USART_Init (var int bps) -> NEVER do
    {
        UCSR0A = 1 << U2X0;
        UBRR0H = (USART_BAUD(@bps)>>8);    // set baud rate
        UBRR0L = (USART_BAUD(@bps));
        UCSR0C = (1<<USBS0) | (3<<UCSZ00);  // 8data, 2stop-bit
        UCSR0B = (1<<RXEN0) | (1<<RXCIE0);  // enables RX & ISRS
    }
    do finalize with
        {
            UCSR0B = 0;                     // disables TX/RX & ISRS
        }
    end
    await FOREVER;
end

code/await USART_Rx (var&[] byte buf, var usize? n) -> none
do
    outer.usart_pm_refs = outer.usart_pm_refs + 1;
    {ceu_pm_set(CEU_PM_USART, 1);}
    do finalize with
        outer.usart_pm_refs = outer.usart_pm_refs - 1;
        if outer.usart_pm_refs == 0 then
            {ceu_pm_set(CEU_PM_USART, 0);}
        end
    end

    loop do
        atomic do
            buf = buf..outer.usart_rx_buf;
            outer.usart_rx_buf = [];
        end
        if (n? and $buf>=n!) or ((not n?) and $buf>0) then
            break;
        end

        await USART_RX;
    end
end
